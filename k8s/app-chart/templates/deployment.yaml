---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"

spec:
  replicas: {{ .Values.replicaCount }}

  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        code-basics/web-pod: "{{ .Release.Name }}-{{ .Values.version }}-web-pod"

    spec:

      imagePullSecrets:
        - name: docker-config

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "code-basics/web-pod"
                    operator: In
                    values:
                      - "{{ .Release.Name }}-{{ .Values.version }}-web-pod"
              topologyKey: "kubernetes.io/hostname"

      volumes:
        - name: users-code-path
          hostPath:
            path: /tmp/hexlet-basics
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: docker-secret
          secret:
            secretName: docker-config
            items:
              - key: .dockerconfigjson
                path: config.json
      containers:
        - name: nginx
          imagePullPolicy: "{{ .Values.nginx.image.imagePullPolicy }}"
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.version }}"
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          ports:
            - containerPort: 8080
          resources:
            limits:
              cpu: 500m
            requests:
              cpu: 10m
          # env:
          #   - name: CADDY_SERVER_ADDRESS
              # value: 127.0.0.1
        - name: web
          securityContext:
            privileged: true
          imagePullPolicy: "{{ .Values.web.image.imagePullPolicy }}"
          image: "{{ .Values.web.image.repository }}:{{ .Values.version }}"
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              httpHeaders:
              - name: X-Forwarded-Host
                value: ru.code-basics.com
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          resources:
            limits:
              cpu: 500m
            requests:
              cpu: 20m
          command:
            - make
            - start-production
          ports:
            - containerPort: 3000
          volumeMounts:
            - mountPath: /tmp/hexlet-basics
              name: users-code-path
            - mountPath: /var/run/docker.sock
              name: docker-sock
            - name: docker-secret
              mountPath: /root/.docker
          envFrom:
            - secretRef:
                name: hexlet-basics-secrets
            - secretRef:
                name: github-credentials
            - secretRef:
                name: facebook-credentials
            - secretRef:
                name: sparkpost-credentials
            - configMapRef:
                name: hexlet-basics-config-map
          env:
            - name: CODE_BASICS_VERSION
              value: {{ .Values.version }}
          lifecycle:
            postStart:
              exec:
                command: {{ .Values.slack_notification }}
